--- linux.old/drivers/mtd/parsers/spx-fmh.c	2020-03-20 18:33:18.401945331 -0400
+++ linux/drivers/mtd/parsers/spx-fmh.c	2020-03-20 20:47:44.972892733 -0400
@@ -23,12 +23,27 @@
 
 
 #define MAX_BANKS CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS	     /* TODO: Not using now. Code to be added when we have a platform to test */
+
+#if defined (CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT)
+#define IMAGE_1  "imagebooted=1"
+#define IMAGE_2  "imagebooted=2"
+#endif
+
+#ifdef CONFIG_SPX_FEATURE_GLOBAL_BKUP_FLASH_BANKS
+#define MAX_BANKS (CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS + CONFIG_SPX_FEATURE_GLOBAL_BKUP_FLASH_BANKS)
+#else
+#ifdef CONFIG_SPX_FEATURE_INDIVIDUAL_SPI_ACCESS
+#define MAX_BANKS 1
+#else
+#define MAX_BANKS CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS
+#endif
+#endif
 /*used by helper */
 /*TODO: Find a way to get all flash info from generic kernel mtd functions */
 int totalbanks=0;
 struct mtd_info *ractrends_mtd[MAX_BANKS];
 EXPORT_SYMBOL(ractrends_mtd);
-
+#if 0
 static
 int
 GetFMHPartitions(struct mtd_info *mtd,unsigned long FlashStart, uint64_t FlashSize, uint32_t SectorSize,struct mtd_partition  *parts)
@@ -110,9 +125,150 @@
 		PartCount++;
 	}
 
+	printk("PartCount is %d\n",PartCount);
+	return  PartCount;
+}
+#endif
+
+#if 1 
+static
+int
+GetFMHPartitions(struct mtd_info *mtd,unsigned long FlashStart, uint64_t FlashSize, uint32_t SectorSize,struct mtd_partition  *parts)
+{
+
+	FMH *fmh;
+	MODULE_INFO *mod;
+	unsigned short ModuleType;
+
+	int PartCount=0;
+	unsigned long sec;
+	unsigned long startingsector=0,endingsector=0,startaddress=0;
+
+	endingsector=(unsigned long)div_u64(FlashSize,SectorSize);
+
+#if defined (CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT)
+	unsigned long startingsector_p=0,endingsector_p=0,startaddress_p=0;
+	int scan_flag=1;
+
+#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+    unsigned long img2_offset=0;
+    for(i=0;i<CONFIG_SPX_FEATURE_SECONDARY_IMAGE_SPI;i++){
+#ifdef CONFIG_SPX_FEATURE_HW_FAILSAFE_BOOT
+        if (broken_spi_banks == 1)
+            img2_offset = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_START - CONFIG_SPX_FEATURE_GLOBAL_FLASH_START);
+        else
+#endif
+        {
+            img2_offset+=ractrends_mtd[i]->size;
+        }
+    }
+
+#endif
+	if(strstr(boot_command_line,IMAGE_1)){
+    	endingsector=(unsigned long)div_u64(CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE,SectorSize);
+
+ #if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+       
+        startingsector_p=(unsigned long)div_u64(img2_offset,SectorSize);
+        endingsector_p=(unsigned long)div_u64(img2_offset+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE,SectorSize);
+        startaddress_p=img2_offset;
+#else
+		startingsector_p=endingsector;
+		endingsector_p=2*endingsector;
+		startaddress_p=CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
+#endif  
+	}
+	else if(strstr(boot_command_line,IMAGE_2)){
+#if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+        startingsector=(unsigned long)div_u64(img2_offset,SectorSize);
+        endingsector=(unsigned long)div_u64(img2_offset+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE,SectorSize);
+        startaddress=img2_offset;
+        endingsector_p=(unsigned long)div_u64(CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE,SectorSize);
+#else
+		startingsector=(unsigned long)div_u64(CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE,SectorSize);
+		endingsector=2*startingsector;
+		startaddress=CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
+		endingsector_p=startingsector;
+#endif  
+    }
+#else
+	//address computation for single image
+	endingsector=(unsigned long)div_u64(FlashSize,SectorSize);
+#endif	
+	/* Create a MTD for full Flash */
+#if 0 	/* DT Kernel creates "mtd0"  for full flash */
+	parts[PartCount].name = kstrndup("fullpart",16,GFP_KERNEL);
+	if (!parts[PartCount].name)
+		return 0;
+    parts[PartCount].size = FlashSize;
+    parts[PartCount].offset = 0;
+    parts[PartCount].mask_flags = 0;
+    parts[PartCount].types=0;
+    parts[PartCount].of_node = 0;
+	printk("MTD Partition %d : %s @ 0x%lx of Size 0x%lx\n",PartCount,parts[PartCount].name,
+								(unsigned long)parts[PartCount].offset,(unsigned long)parts[PartCount].size);
+	PartCount++;
+#endif
+
+
+	for (sec=startingsector;sec<endingsector;)
+	{
+		fmh = ScanforFMH((unsigned char *)(FlashStart+(sec*SectorSize)),(unsigned long)SectorSize,mtd);
+		if (fmh == NULL)
+		{
+			sec++;
+			continue;	
+		}
+		mod = &(fmh->Module_Info);
+
+		/* Check if module type is JFFS or JFFS2 */
+		ModuleType = le16_to_host(mod->Module_Type);
+		if ((ModuleType != MODULE_JFFS) && (ModuleType != MODULE_JFFS2) && 
+			(ModuleType != MODULE_INITRD_CRAMFS) && (ModuleType != MODULE_CRAMFS)  && 
+			(ModuleType != MODULE_SQUASHFS) && (ModuleType != MODULE_INITRD_SQUASHFS) &&
+		    (ModuleType != MODULE_CACHE))
+		{
+			if ((sec*SectorSize) > le32_to_host(mod->Module_Location))		/* AltFMH */
+				sec++;
+			else
+				sec+=(unsigned long)div_u64(le32_to_host(fmh->FMH_AllocatedSize),SectorSize);
+			continue;
+		}
+
+		/* Fill the parition information */
+		parts[PartCount].name = kstrndup(mod->Module_Name,16, GFP_KERNEL);
+ 		if (!parts[PartCount].name)
+        	return 0;
+		parts[PartCount].mask_flags = 0;
+    	parts[PartCount].types=0;
+    	parts[PartCount].of_node = 0;
+		parts[PartCount].size = le32_to_host(mod->Module_Size);
+
+		if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8)){
+			parts[PartCount].offset = startaddress+le32_to_host(mod->Module_Location);
+printk("vers if\n");
+}
+		else
+{
+			parts[PartCount].offset =startaddress+ (sec*SectorSize)+ le32_to_host(mod->Module_Location);
+printk("vers else\n");
+}
+
+		printk("MTD Partition %d : %s @ 0x%lx of Size 0x%lx\n",PartCount,parts[PartCount].name,
+								(unsigned long)parts[PartCount].offset,(unsigned long)parts[PartCount].size);
+
+
+		if ((sec*SectorSize) > le32_to_host(mod->Module_Location))   /* AltFMH */
+			sec++;
+		else
+			sec+=(unsigned long)div_u64(le32_to_host(fmh->FMH_AllocatedSize),SectorSize);
+		PartCount++;
+	}
+
 	//printk("PartCount is %d\n",PartCount);
 	return  PartCount;
 }
+#endif
 
 
 static int 
@@ -126,7 +282,7 @@
 	struct mtd_partition tmp_parts[MAX_PARTS];
 	struct mtd_partition *parts;
 	int PartCount;
-	int bank;
+	int bank,flashstart=0;
 
 	/* Initialize all on first call */
 	if (totalbanks == 0)
@@ -137,9 +293,22 @@
 	ractrends_mtd[totalbanks++]=mtd;
 
 
-	PartCount = GetFMHPartitions(mtd,0,mtd->size,mtd->erasesize,tmp_parts);
+
+/*	if(strstr(boot_command_line,IMAGE_1)){
+		  flashstart=0;
+	}*/
+//	if(0){
+#if defined (CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT)	
+	if(strstr(boot_command_line,IMAGE_2)){
+		   printk("[%s:%d]\n",__FILE__,__LINE__);
+		   flashstart=CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
+	}
+#endif
+//}
+	PartCount = GetFMHPartitions(mtd,flashstart,mtd->size,mtd->erasesize,tmp_parts);
 	if (!PartCount)
 		return -ENOMEM;
+	
 
 	/* Allocate memory and copy information */
     parts = kzalloc(PartCount * sizeof(struct mtd_partition), GFP_KERNEL);
